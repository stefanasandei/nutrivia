generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String           @id @default(cuid())
    name          String?          @unique
    email         String?          @unique
    emailVerified DateTime?
    image         String?
    allergies     RawFoodProduct[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model RawFoodProduct {
    id            Int           @id @default(autoincrement())
    name          String
    image         String?
    allergicUsers User[]
    foods         FoodProduct[]
}

model FoodProduct {
    id          Int              @id @default(autoincrement())
    name        String
    brand       String?
    weightG     Int
    priceRON    Int
    image       String?
    ingredients RawFoodProduct[]
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
