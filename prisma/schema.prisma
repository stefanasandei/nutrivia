generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String           @id @default(cuid())
    name           String?          @unique
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    hasAgreed      Boolean          @default(false)
    allergies      RawFoodProduct[]
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    Comment        Comment[]
    FoodSubmission FoodSubmission[]
}

model RawFoodProduct {
    id            Int           @id @default(autoincrement())
    name          String
    calories      Int // kcal
    lipids        Int // g
    cholesterol   Int // mg
    sodium        Int // mg
    potassium     Int // mg
    carbohydrate  Int // g
    proteins      Int // g
    vitaminC      Int // mg
    calcium       Int // mg
    iron          Int // mg
    vitaminD      Int // iu
    vitaminB6     Int // mg
    vitaminB12    Int // Âµg
    magnesium     Int // mg
    allergicUsers User[]
    foods         FoodProduct[]
}

model FoodProduct {
    id            Int              @id @default(autoincrement())
    name          String
    brand         String
    originCountry String
    nutriScore    String
    ean           String
    weightG       Int
    priceRON      Int
    image         String?
    likedBy       String[]         @default([])
    dislikedBy    String[]         @default([])
    ingredients   RawFoodProduct[]
    comments      Comment[]
    isHidden      Boolean          @default(false)
    submission    FoodSubmission?
}

model FoodSubmission {
    id            Int         @id @default(autoincrement())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    createdBy     User        @relation(fields: [createdById], references: [id])
    createdById   String
    food          FoodProduct @relation(fields: [foodProductId], references: [id], onDelete: Cascade)
    foodProductId Int         @unique
}

model Post {
    id          Int       @id @default(autoincrement())
    title       String
    body        String?
    image       String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   User      @relation(fields: [createdById], references: [id])
    createdById String
    likedBy     String[]  @default([])
    comments    Comment[]
}

model Comment {
    id            Int          @id @default(autoincrement())
    body          String
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    createdBy     User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById   String
    Post          Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId        Int?
    FoodProduct   FoodProduct? @relation(fields: [foodProductId], references: [id], onDelete: Cascade)
    foodProductId Int?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
